
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  banner        Banner?   // ‚Üê plus de @relation ici !
    
    userItems     UserItems[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Banner {
  id          String   @id @default(uuid())
  pseudo      String   @unique
  description String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  url       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banner")
}

model Store {
  id        String   @id @default(uuid())
  name      String
  price     Int
  url       String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

   userItems     UserItems[]

  @@map("store")
}

model UserItems {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  store     Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId   String
  acquiredAt DateTime @default(now())

  @@unique([userId, storeId])
  @@map("user_items")
}
